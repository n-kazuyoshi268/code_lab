画面設計（UI/UX設計）
目的: ユーザーが快適に利用できる画面構成を考える。
具体的な作業:
ワイヤーフレーム（画面遷移図を含む）の作成
例: 「問題リスト画面」「解答画面」「結果表示画面」「設定画面」など。
画面要素（ボタン、リスト、テキスト）の配置を決める。
色やフォントなどのスタイルを検討（Androidのマテリアルデザインガイドラインを参考に）。
ツール例: Figma, Adobe XD, もしくは手書きで構わない

2. データ設計
目的: 過去問や学習履歴を効率的に管理できるデータ構造を設計する。
具体的な作業:
データベース設計: SQLiteを使用する場合、以下を設計。
問題テーブル（ID、年度、問題文、解答、解説）
学習履歴テーブル（問題ID、解答結果、学習日など）
サンプルデータを用意してテストデータベースを作成。
参考データ構造例:

sql
コードをコピーする
CREATE TABLE Questions (
    id INTEGER PRIMARY KEY,
    year TEXT,
    category TEXT,
    question_text TEXT,
    answer TEXT,
    explanation TEXT
);

CREATE TABLE StudyHistory (
    id INTEGER PRIMARY KEY,
    question_id INTEGER,
    is_correct BOOLEAN,
    study_date TEXT
);
3. プロトタイプ開発
目的: 基本的な機能を試作し、動作を確認する。
具体的な作業:
開発環境をセットアップ（Android Studio + Kotlin）。
小さな機能から実装開始（例: 「問題リストを表示する」）。
プロトタイプの中で、問題データの表示と解答の入力を実現。
4. 詳細機能の実装
優先順位をつけて実装:
まず「基本機能」から着手。
問題閲覧・解答、正誤判定。
学習履歴の記録。
その後、「応用機能」や「データ更新機能」を追加。
5. テストフェーズ
目的: アプリの安定性や使い勝手を確認する。
具体的な作業:
ユニットテストで個別機能を確認。
実機テストでオフライン環境や速度を検証。
バグを修正し、安定版を準備。
6. リリース準備
目的: アプリの公開または利用開始。
具体的な作業:
APKを生成して自分のデバイスにインストール。
必要であればGoogle Playでの配布を検討。
